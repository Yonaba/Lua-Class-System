{"note":"Don't delete this file! It's used internally to help with page regeneration.","google":"UA-33850683-1","body":"#LCS : Lua Class System#\r\n__Lua Class System__ (LCS) is a small library which offers a clean, minimalistic but powerful API for (Pseudo) Object Oriented programming style using Lua.\r\n__LCS is lightweight__ thus can fit in every project where OOP mechanisms are needed.\r\n\r\n  \r\n##Usage##\r\nAdd 'LCS.lua' file inside your project.\r\nCall it using require command.\r\nIt will return a table containing a set of functions.\r\n\t\r\n##Full API Overview##\r\n\t\tLCS.class(args)  : Creates a class\r\n\t\tLCS.class.final(args)  : Creates a final class.\r\n\t\tLCS.class.abstract(args)  : Creates a static class.\r\n\t\tLCS.is_A(thing,kind)  : Checks the nature of the given argument 'thing'.\r\n\t\t\r\n\t\t[class](args) : Default class constructor used for instantiation.\r\n\t\t[class]:new(args) : Same as [class](args)\r\n\t\t[class]:extends(args) : Returns a new class derived from class [class].\r\n\t\t[class]:getClass() : Returns a reference to the superclass of class [class] \r\n\t\t[class]:getSubClasses() : Returns a list of all classes deriving from class [class] \r\n\t\t[class]:super(method,...) : Calls a method defined in a parent of class [class]\r\n\t\t\r\n\t\t[instance]:getClass() : Returns a reference to the class from which 'instance' was created\r\n\t\t[instance]:is_A(aClass) : \tChecks if instance [instance] was instantiated from a specific class.\r\n\t\t[instance]:super(method,...) : \tCalls a methods defined in a parent of a class from which object 'instance' was created \r\n\t\t\r\n##Documentation##\r\n* Full Documentation is available, with example code: [Documentation][].\r\n* Tests have also been included : See [Tests.lua][]\r\n* A quickTour have been included : See [quickTour.lua][]\r\n* Documentation was generated thanks to [LuaDoc][].\r\n\r\n\t\t\r\n##License##\r\nThis work is under [zLIB License][]\r\nCopyright (c) 2012 Roland Yonaba\r\n\r\n    This software is provided 'as-is', without any express or implied\r\n    warranty. In no event will the authors be held liable for any damages\r\n    arising from the use of this software.\r\n\r\n    Permission is granted to anyone to use this software for any purpose,\r\n    including commercial applications, and to alter it and redistribute it\r\n    freely, subject to the following restrictions:\r\n\r\n    1. The origin of this software must not be misrepresented; you must not\r\n    claim that you wrote the original software. If you use this software\r\n    in a product, an acknowledgment in the product documentation would be\r\n    appreciated but is not required.\r\n\r\n    2. Altered source versions must be plainly marked as such, and must not be\r\n    misrepresented as being the original software.\r\n\r\n    3. This notice may not be removed or altered from any source\r\n    distribution.\r\n\r\n[Documentation]: https://github.com/Yonaba/Lua-Class-System/downloads\r\n[Tests.lua]: https://github.com/Yonaba/Lua-Class-System/blob/master/tests.lua\r\n[quickTour.lua]: https://github.com/Yonaba/Lua-Class-System/blob/master/quickTour.lua\r\n[LuaDoc]: http://keplerproject.github.com/luadoc/\r\n[zLIB License]: http://www.opensource.org/licenses/zlib-license.php","name":"Lua-class-system","tagline":"Lua Class System (LCS) is a small library which offers a clean, minimalistic yet powerful  API for (Pseudo) Object Oriented programming style using Lua."}